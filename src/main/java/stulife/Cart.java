package stulife;


import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Mowy
 */
public class Cart extends javax.swing.JFrame {
    private User user;
    private static Cart instance;

    public static Cart getInstance() {
        if (instance == null) {
            instance = new Cart();
        }
        return instance;
    }

    @Override
    public void dispose() {
        instance = null;
        super.dispose();
    }
    public Cart() {
        initComponents();
        setTitle("Cart");
        setLocationRelativeTo(null);
        setResizable(false);
        
        
        String SUrl, SUser, SPass;
        SUrl = "jdbc:MySQL://localhost:3306/stulife_user";
        SUser = "root";
        SPass = "";
        
        try {
            Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
            String query = "SELECT * FROM food WHERE userID = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setInt(1, user.getId());

            ResultSet rs = pst.executeQuery();

            int totalPrice = 0; // Initialize totalPrice
            totalCalories = 0;

            while (rs.next()) {
                String food = rs.getString("food");
                int quantity = rs.getInt("quantity");
                int price = rs.getInt("price");
                int calories = rs.getInt("calories");

                String tbData[] = {food, String.valueOf(quantity), String.valueOf(calories), String.valueOf(price)};
                DefaultTableModel tblModel = (DefaultTableModel) table.getModel();

                
                tblModel.addRow(tbData);
                tblModel.fireTableDataChanged();
                table.revalidate();
                table.repaint();

                totalPrice += quantity * price;
                totalCalories += quantity * calories;
            }

            totalnumcalories.setText("Total Calories: " + totalCalories + " / 2500");
            totalnumprice.setText("Total Price: " + totalPrice + " - (" + User.getBudget() + ") = " + (Integer.valueOf(User.getBudget() - totalPrice)));

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }


            table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            table.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    int row = table.rowAtPoint(e.getPoint());
                    if (row >= 0) {
                        table.setRowSelectionInterval(row, row);
                    }
                }
            });
        
        getContentPane().setBackground(new Color(255, 245, 230));
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        goaltext = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        remove1 = new java.awt.Button();
        button1 = new java.awt.Button();
        totalnumprice = new javax.swing.JLabel();
        totalnumcalories = new javax.swing.JLabel();
        functions = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cart");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 245, 230));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        goaltext.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        goaltext.setForeground(new java.awt.Color(5, 75, 40));
        goaltext.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        goaltext.setText("Calories Goal: 2500");
        goaltext.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(goaltext, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 170, 30));

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        table.setBackground(new java.awt.Color(255, 245, 230));
        table.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food", "Quantity", "Calories", "Price"
            }
        ));
        table.setEnabled(false);
        table.setPreferredSize(new java.awt.Dimension(300, 1000));
        table.setRowHeight(25);
        table.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        table.setShowGrid(true);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 650, 320));

        remove1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        remove1.setLabel("Remove");
        remove1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remove1MouseClicked(evt);
            }
        });
        getContentPane().add(remove1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 400, -1, 30));

        button1.setLabel("Add 1");
        button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                button1MouseClicked(evt);
            }
        });
        getContentPane().add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 400, 60, 30));

        totalnumprice.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        totalnumprice.setForeground(new java.awt.Color(5, 75, 40));
        totalnumprice.setText("Total Price: ");
        getContentPane().add(totalnumprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, -1, -1));

        totalnumcalories.setBackground(new java.awt.Color(0, 0, 0));
        totalnumcalories.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        totalnumcalories.setForeground(new java.awt.Color(5, 75, 40));
        totalnumcalories.setText("Total Calories: ");
        getContentPane().add(totalnumcalories, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        functions.setBackground(new java.awt.Color(255, 245, 230));
        functions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        functions.setOpaque(true);
        getContentPane().add(functions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 650, 100));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wallpaper.png"))); // NOI18N
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int row = table.rowAtPoint(evt.getPoint());
            if (row >= 0) {
                table.setRowSelectionInterval(row, row); // Select the entire row
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseClicked

    private void tablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePropertyChange
        
    }//GEN-LAST:event_tablePropertyChange

    private void remove1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove1MouseClicked
        int selectedRow = table.getSelectedRow();

        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a row to remove.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String foodName = model.getValueAt(selectedRow, 0).toString(); // Get the name of the food to delete

        String SUrl = "jdbc:MySQL://localhost:3306/stulife_user";
        String SUser = "root";
        String SPass = "";

        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass)) {
            // Remove from the database
            String deleteQuery = "DELETE FROM food WHERE food = ? AND userID = ?";
            PreparedStatement pst = con.prepareStatement(deleteQuery);
            pst.setString(1, foodName);
            pst.setInt(2, user.getId());
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                // Remove from the table
                model.removeRow(selectedRow);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to remove item from the database.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

            // Update total price and calories
            updateTotalValues(model);

        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while removing the item.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_remove1MouseClicked

    private void button1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button1MouseClicked
            int selectedRow = table.getSelectedRow();

    if (selectedRow == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please select a row to increment.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) table.getModel();
    int currentQuantity = Integer.parseInt(model.getValueAt(selectedRow, 1).toString());
    int calories = Integer.parseInt(model.getValueAt(selectedRow, 2).toString());
    int price = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());

    // Update quantity in the table
    model.setValueAt(currentQuantity + 1, selectedRow, 1);

    // Update total values
    updateTotalValues(model);

    // Update the database
    String foodName = model.getValueAt(selectedRow, 0).toString();
    String SUrl = "jdbc:MySQL://localhost:3306/stulife_user";
    String SUser = "root";
    String SPass = "";

    try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String updateQuery = "UPDATE food SET quantity = quantity + 1 WHERE food = ? AND userID = ?";
            PreparedStatement pst = con.prepareStatement(updateQuery);
            pst.setString(1, foodName);
            pst.setInt(2, user.getId());
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Added 1 " + foodName);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to update quantity in the database.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while updating the item.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button1MouseClicked

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        this.dispose();
        HomeFrame hf = new HomeFrame();
        hf.setVisible(true);
    }//GEN-LAST:event_formWindowIconified

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
        HomeFrame hf = new HomeFrame();
        hf.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void updateTotalValues(DefaultTableModel model) {
        int totalPrice = 0;
        int totalCalories = 0;

        for (int i = 0; i < model.getRowCount(); i++) {
            int quantity = Integer.parseInt(model.getValueAt(i, 1).toString());
            int price = Integer.parseInt(model.getValueAt(i, 3).toString());
            int calories = Integer.parseInt(model.getValueAt(i, 2).toString());

            totalPrice += quantity * price;
            totalCalories += quantity * calories;
        }

        totalnumprice.setText("Total Price: " + totalPrice + " - (" + User.getBudget() + ") = " + (Integer.valueOf(User.getBudget() - totalPrice)));
        totalnumcalories.setText("Total Calories: " + totalCalories + " / 2500");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JLabel functions;
    private javax.swing.JLabel goaltext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Button remove1;
    private javax.swing.JTable table;
    private javax.swing.JLabel totalnumcalories;
    private javax.swing.JLabel totalnumprice;
    // End of variables declaration//GEN-END:variables
    public static int totalCalories;
}
